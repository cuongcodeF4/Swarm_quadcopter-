"""
This script generates a CSV file for a selected drone trajectory and creates a 3D plot of the trajectory. The CSV and PNG files of the trajectory are saved in the "shapes" directory.

Example Usage:
--------------
To generate a CSV file for a circular trajectory, use the following code snippet:

create_active_csv(shape_name="circle", diameter=5.0, direction=1, maneuver_time=60.0, start_x=0.0, start_y=0.0, initial_altitude=10.0, climb_rate=2.0, move_speed=2.5, hold_time=2.0)

Available trajectories:
-----------------------
"eight_shape", "circle", "square", "helix", "heart_shape", "infinity_shape", "spiral_square", "star_shape", "zigzag", "sine_wave"

Visualization:
--------------
After generating the CSV file, you can visualize the trajectory using plot functions and save the trajectory plot in the "shapes" folder along with the CSV file.

Note:
-----
Make sure to have the necessary dependencies installed and correctly set up the offboard control system to use the generated CSV file for controlling the drone in an offboard mode.

Usage:
------
The output generated by `csvCreator.py` can be utilized in the `offboard_from_csv.py` file, also available in the same GitHub repository, to control a drone in an offboard mode. The generated CSV file contains the necessary information for each step of the drone's trajectory, including position, velocity, acceleration, yaw angle, and LED colors.

Offboard Control in PX4:
------------------------
The offboard mode in PX4 is a flight mode that allows external systems to control the drone's position and velocity directly. It enables autonomous flight and is commonly used in research, development, and testing scenarios. The offboard control system communicates with the drone's flight controller through a communication protocol like MAVLink.

To use the CSV output generated by `csvCreator.py` for offboard control in PX4, you can follow these steps:
1. Load the generated CSV file, which represents the desired trajectory for the drone.
2. Extract the position and velocity information from the CSV file.
3. Send the position and velocity commands to the drone's flight controller using an offboard control system, such as the `offboard_from_csv.py` script.
4. The flight controller will interpret the commands and execute the desired trajectory, guiding the drone accordingly.

CSV File Structure and Guide:
----------------------------
The CSV file created by `csvCreator.py` follows a specific structure, where each row represents a step of the drone's trajectory. The columns in the CSV file contain the following information:
- `idx`: Index or step number of the trajectory.
- `t`: Time in seconds for the given step.
- `px`: Drone's position in the X-axis.
- `py`: Drone's position in the Y-axis.
- `pz`: Drone's position in the Z-axis (negative value indicates altitude).
- `vx`: Drone's velocity in the X-axis.
- `vy`: Drone's velocity in the Y-axis.
- `vz`: Drone's velocity in the Z-axis.
- `ax`: Drone's acceleration in the X-axis.
- `ay`: Drone's acceleration in the Y-axis.
- `az`: Drone's acceleration in the Z-axis.
- `yaw`: Drone's yaw angle.\
- 'mode' : Flight Phase Mode
- `ledr`: Red component value for the drone's LED color.
- `ledg`: Green component value for the drone's LED color.
- `ledb`: Blue component value for the drone's LED color.

Flight Modes and Codes:
- 0: On the ground
- 10: Initial climbing state
- 20: Initial holding after climb
- 30: Moving to start point
- 40: Holding at start point
- 50: Moving to maneuvering start point
- 60: Holding at maneuver start point
- 70: Maneuvering (trajectory)
- 80: Holding at the end of the trajectory coordinate
- 90: Returning to home coordinate
- 100: Landing

Each flight mode is represented by an integer code. These codes are used to indicate the different phases of the flight in the CSV file.

To create a valid CSV file for offboard control, make sure to adhere to the structure described above. Each row should represent a specific time step with the corresponding position, velocity, acceleration, and LED color values.
"""



import csv
import math
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import pandas as pd
from functions.trajectories import *

def takeoff_and_initial_climb(initial_altitude, climb_rate, step_time, writer, last_time=0, last_step=0, last_coordinates=(0, 0, 0)):
    """
    This function simulates the takeoff and initial climb phase of a drone's flight.

    Parameters:
    initial_altitude (float): The initial altitude that the drone should climb to.
    climb_rate (float): The climb rate of the drone.
    step_time (float): The simulation step time.
    writer (object): A CSV writer object to write the simulation data.
    last_time (float): The time at the end of the last simulation phase.
    last_step (int): The step at the end of the last simulation phase.
    last_coordinates (tuple): The (x, y, z) position at the end of the last simulation phase.

    Returns:
    float: The simulation time at the end of this phase.
    int: The simulation step at the end of this phase.
    tuple: The (x, y, z) position at the end of this phase.
    """
    climb_time = initial_altitude / climb_rate
    climb_steps = int(climb_time / step_time)

    for i in range(climb_steps):
        idx = last_step + i
        t = last_time + i * step_time
        x, y, _ = last_coordinates
        z = -1 * (climb_rate * t)
        vx = 0.0
        vy = 0.0
        vz = -climb_rate
        ax = 0
        ay = 0
        az = 0
        yaw = 0
        mode = 10
        ledr = 0
        ledg = 0
        ledb = 0
        row = [t, x, y, z, vx, vy, vz, ax, ay, az, yaw, mode]
        writer.writerow(row)
    
    return t, idx, (x, y, z)

def hold_position(hold_time, step_time, writer, last_time, last_step, last_coordinates, mode=20):
    """
    This function writes a set of steps to a csv file to hold the drone at its current position for a certain time.

    Parameters:
    hold_time: The duration for which the drone should hold its position.
    step_time: The duration of each step.
    writer: The csv writer object to write the steps to.
    last_time: The time at the end of the last step.
    last_step: The index of the last step.
    last_coordinates: A tuple (x, y, z) indicating the drone's current coordinates.
    mode: The flight mode. Default is 20.
    rgb: The color of the LED lights.

    Returns:
    last_time: The time at the end of the last written step.
    last_step: The index of the last written step.
    last_coordinates: The drone's coordinates at the end of the last written step.
    """
    hold_steps = int(hold_time / step_time)

    for i in range(hold_steps):
        t = last_time + i * step_time
        x, y, z = last_coordinates
        vx = vy = vz = 0
        ax = ay = az = 0
        yaw = 0
        row = [t, x, y, z, vx, vy, vz, ax, ay, az, yaw, mode]
        writer.writerow(row)

    last_time += hold_time
    last_step += hold_steps

    return last_time, last_step, last_coordinates

def move_to(target_coordinates, move_speed, step_time, writer, last_time, last_step, last_coordinates, mode=30):
    """
    This function writes a set of steps to a csv file to move the drone to target coordinates at a given speed.

    Parameters:
    target_coordinates: A tuple (x, y, z) indicating the target coordinates to move to.
    move_speed: The speed at which the drone should move.
    step_time: The duration of each step.
    writer: The csv writer object to write the steps to.
    last_time: The time at the end of the last step.
    last_step: The index of the last step.
    last_coordinates: A tuple (x, y, z) indicating the drone's current coordinates.
    mode: The flight mode. Default is 30.
    rgb: The color of the LED lights.

    Returns:
    last_time: The time at the end of the last written step.
    last_step: The index of the last written step.
    last_coordinates: The drone's coordinates at the end of the last written step.
    """
    # Calculate the distance and time to move to the target
    distance = math.sqrt((target_coordinates[0] - last_coordinates[0])**2 +
                         (target_coordinates[1] - last_coordinates[1])**2 +
                         (target_coordinates[2] - last_coordinates[2])**2)
    
    move_time = distance / move_speed
    move_steps = int(move_time / step_time)
    
    for i in range(move_steps):
        t = last_time + i * step_time
        ratio = i / move_steps
        x = last_coordinates[0] + (target_coordinates[0] - last_coordinates[0]) * ratio
        y = last_coordinates[1] + (target_coordinates[1] - last_coordinates[1]) * ratio
        z = last_coordinates[2] + (target_coordinates[2] - last_coordinates[2]) * ratio
        vx = move_speed * (target_coordinates[0] - last_coordinates[0]) / distance
        vy = move_speed * (target_coordinates[1] - last_coordinates[1]) / distance
        vz = move_speed * (target_coordinates[2] - last_coordinates[2]) / distance
        ax = 0
        ay = 0
        az = 0
        yaw = 0
        row = [t, x, y, z, vx, vy, vz, ax, ay, az, yaw, mode]
        writer.writerow(row)
    
    last_time += move_time
    last_step += move_steps
    last_coordinates = target_coordinates

    return last_time, last_step, last_coordinates

def move_to_maneuver_start(shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args, writer, last_time, last_step, last_coordinates, hold_time, move_speed, mode_move=50, mode_hold=60):
    """
    This function checks if the drone's current position is different from the first setpoint of the maneuver.
    If they are different, it moves the drone to the first setpoint of the maneuver and holds it there.
    It then calculates the start time after the maneuver start.

    Parameters:
    shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args: These are used to get the first setpoint of the maneuver.
    writer: The csv writer object to write the steps to.
    last_time: The time at the end of the last step.
    last_step: The index of the last step.
    last_coordinates: A tuple (x, y, z) indicating the drone's current coordinates.
    hold_time: The duration for which the drone should hold its position.
    move_speed: The speed at which the drone should move to the first setpoint.
    mode_move: The flight mode while moving. Default is 50.
    mode_hold: The flight mode while holding. Default is 60.
    rgb: The color of the LED lights.

    Returns:
    last_time: The time at the end of the last written step.
    last_step: The index of the last written step.
    last_coordinates: The drone's coordinates at the end of the last written step.
    start_time: The start time after the maneuver start.
    """
    start_x, start_y, _ = last_coordinates
    maneuver_start_x, maneuver_start_y = shape_fcn(0, maneuver_time, diameter, direction, initial_altitude, step_time, *shape_args)[:2]
    
    
    if 0 != maneuver_start_x or 0 != maneuver_start_y:
        # Move drone to first setpoint of maneuver
        target_coordinates=(start_x + maneuver_start_x, start_y + maneuver_start_y, last_coordinates[2])
        #last_coordinates = (sta, maneuver_start_y, last_coordinates[2])
        last_time, last_step, last_coordinates = move_to(
            target_coordinates, 
            move_speed=move_speed, 
            step_time=step_time, 
            writer=writer, 
            last_time=last_time, 
            last_step=last_step, 
            last_coordinates=last_coordinates, 
            mode=mode_move,
        )

        # Hold drone at first setpoint
        last_time, last_step, last_coordinates = hold_position(hold_time, step_time, writer, last_time, last_step, last_coordinates, mode=mode_hold)

        # Calculate the start time after maneuver start
        start_time = last_time
    else:
        # Calculate the start time after maneuver start
        start_time = last_time

    return last_time, last_step, last_coordinates, start_time

def perform_maneuver(shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args, writer, start_time, last_step, start_coordinates, mode=70):
    """
    This function makes the drone perform the maneuver described by shape_fcn.
    
    Parameters:
    shape_fcn: A function that given the maneuver parameters, returns the drone's target position and velocity.
    maneuver_time, diameter, direction, initial_altitude, step_time, shape_args: The parameters for shape_fcn.
    writer: The csv writer object to write the steps to.
    start_time: The time at the start of the maneuver.
    last_step: The index of the last step before the maneuver starts.
    start_coordinates: The drone's coordinates at the start of the maneuver.
    mode: The flight mode during the maneuver. Default is 70.
    rgb: The color of the LED lights.
    
    Returns:
    last_time: The time at the end of the last step in the maneuver.
    last_step: The index of the last step in the maneuver.
    last_coordinates: The drone's coordinates at the end of the maneuver.
    """
    start_x, start_y, start_z = start_coordinates
    move_steps = int(maneuver_time / step_time)
    maneuver_start_x, maneuver_start_y = shape_fcn(0, maneuver_time, diameter, direction, initial_altitude, step_time, *shape_args)[:2]

    for step in range(move_steps):
        x, y, z, vx, vy, vz, ax, ay, az = shape_fcn(step, maneuver_time, diameter, direction, initial_altitude, step_time, *shape_args)
        x += start_x
        y += start_y
        x -= maneuver_start_x
        y -= maneuver_start_y
        yaw = 0
        missionTime = start_time + step * step_time
        row = [missionTime, x, y, z, vx, vy, vz, ax, ay, az, yaw, mode]
        writer.writerow(row)

    last_step += move_steps
    last_time = start_time + move_steps * step_time
    last_coordinates = (x, y, z)

    return last_time, last_step, last_coordinates

def repeat_maneuver(num_repeats, shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args, writer, last_time, last_step, last_coordinates, hold_time, move_speed, start_coordinates, mode_move=100, mode_hold=80):
    """
    This function makes the drone repeat the maneuver described by shape_fcn for a specified number of times.
    
    Parameters:
    num_repeats: The number of times to repeat the maneuver.
    shape_fcn: A function that given the maneuver parameters, returns the drone's target position and velocity.
    maneuver_time, diameter, direction, initial_altitude, step_time, shape_args: The parameters for shape_fcn.
    writer: The csv writer object to write the steps to.
    last_time, last_step, last_coordinates: The time, step number, and coordinates at the end of the last maneuver.
    hold_time: The time to hold the position after each maneuver.
    move_speed: The speed to move back to the start of the maneuver.
    start_coordinates: The drone's coordinates at the start of the maneuver.
    mode_move: The flight mode during the movement back to the start. Default is 50.
    mode_hold: The flight mode during the hold. Default is 60.
    
    Returns:
    last_time: The time at the end of the last repetition.
    last_step: The index of the last step in the last repetition.
    last_coordinates: The drone's coordinates at the end of the last repetition.
    """

    for _ in range(num_repeats):
        # Call the move_to_maneuver_start function
        # last_time, last_step, last_coordinates, start_time = move_to_maneuver_start(shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args, writer, last_time, last_step, last_coordinates, hold_time, move_speed)
        start_time = last_time
        # Call the maneuver function
        last_time, last_step, last_coordinates = perform_maneuver(shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args, writer, start_time, last_step, last_coordinates)

        # Hold at the end of the maneuver
        last_time, last_step, last_coordinates = hold_position(hold_time, step_time, writer, last_time, last_step, last_coordinates, mode=60)

        # If this was not the last repetition, move drone back to the start of the maneuver
        if _ < num_repeats - 1:
            last_time, last_step, last_coordinates = move_to(start_coordinates, move_speed, step_time, writer, last_time, last_step, last_coordinates, mode=50)

    return last_time, last_step, last_coordinates




def create_active_csv(shape_name,num_repeats, diameter, direction, maneuver_time, start_x, start_y, initial_altitude, move_speed, hold_time , step_time, output_file="active.csv"):

    if shape_name == "Circle":
        shape_code, shape_fcn, shape_args = 1, circle_trajectory, ()
    elif shape_name == "Square":
        shape_code, shape_fcn, shape_args = 2, square_trajectory, ()
    else:
        # Raise an error for invalid shape names
        raise ValueError(f"Invalid shape name: {shape_name}")

    # The function returns the code, function, and arguments associated with the given shape name
    print(f"Shape Code: {shape_code}")
    print(f"Shape Function: {shape_fcn}")
    print(f"Shape Arguments: {shape_args}")

    header = ["t", "px", "py", "pz", "vx", "vy", "vz", "ax", "ay", "az", "yaw", "mode"]

    with open(output_file, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(header)

        # Initialize variables
        last_time = 0.0
        last_step = 0
        last_coordinates = (0, 0, -1*initial_altitude)

        # # Call the hold_position function after the climb
        # last_time, last_step, last_coordinates = hold_position(hold_time, step_time, writer, last_time, last_step, last_coordinates,mode = 20)

        # Initialize start coordinates
        start_coordinates = (start_x, start_y, -1*initial_altitude)

        # Call the move_to start points function
        last_time, last_step, last_coordinates = move_to(start_coordinates, move_speed, step_time, writer, last_time, last_step, last_coordinates)
    

        # Call the hold_position function
        last_time, last_step, last_coordinates = hold_position(hold_time, step_time, writer, last_time, last_step, last_coordinates, mode=40)
        

        # Call the repeat_maneuver function
        last_time, last_step, last_coordinates = repeat_maneuver(num_repeats, shape_fcn, maneuver_time, diameter, direction, initial_altitude, step_time, shape_args, writer, last_time, last_step, last_coordinates, hold_time, move_speed, start_coordinates)
        
        #Hold at the end of the menuver
        last_time, last_step, last_coordinates = hold_position(hold_time, step_time, writer, last_time, last_step, last_coordinates, mode=80)


        # # Define the target coordinates for returning to launch point
        # return_coordinates = (0, 0, -initial_altitude)

        # # Call the move_to function
        # last_time, last_step, last_coordinates = move_to(return_coordinates, move_speed, step_time, writer, last_time, last_step, last_coordinates, mode=90)

        
            
            
        print(f"Created {output_file} with the {shape_name}.")


